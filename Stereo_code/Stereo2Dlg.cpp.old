// Stereo2Dlg.cpp : implementation file
//

#include "stdafx.h"
#include "Stereo2.h"
#include "Stereo2Dlg.h"
#include "niimaq.h"
#include "parameters.h"
#include "functions.h"
#include <stdlib.h>

#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif


CDC     *device;

uInt8     imagedata[640*480];
uInt8    *ImageAddr;

uInt8     imagedatacam1[640*480];
uInt8    *ImageCam1;
uInt8     imagedatacam2[640*480];
uInt8    *ImageCam2;

uInt8     refimagedatacam1[640*480];
uInt8    *RefImageCam1;
uInt8     refimagedatacam2[640*480];
uInt8    *RefImageCam2;

uInt8     colimagedata1[3*640*480];
uInt8     colimagedata2[3*640*480];

Extrinsic_par  ex1,ex2;
Intrinsic_par  in1,in2;
CCD_par        ccd1,ccd2;  //CCD width, height and  pixel width, height
T_vec          t, t1, t2;  //Points in Images; metric; (0,0): left upper corner
Matrix         R, R1, R2;

CamPointVec    m1,m2;      //Points in Images; metric; (0,0): left upper corner
CamPointVec    hm1,hm2;    //homogeneous Coordinates
//CamPointVec    hm1_,hm2_;  //projection of hm1 (hm2) into coord. syst. of camera 2 (1)
GlobalPointVec M;          //Points in space
Streak		   streak1[MAX],      streak2[MAX];
Streak_par     streak_par1[MAX],  streak_par2[MAX];

EpiParVec      epivec;


/////////////////////////////////////////////////////////////////////////////
// CAboutDlg dialog used for App About

class CAboutDlg : public CDialog
{
public:
	CAboutDlg();

// Dialog Data
	//{{AFX_DATA(CAboutDlg)
	enum { IDD = IDD_ABOUTBOX };
	//}}AFX_DATA

	// ClassWizard generated virtual function overrides
	//{{AFX_VIRTUAL(CAboutDlg)
	protected:
	virtual void DoDataExchange(CDataExchange* pDX);    // DDX/DDV support
	//}}AFX_VIRTUAL

// Implementation
protected:
	//{{AFX_MSG(CAboutDlg)
	//}}AFX_MSG
	DECLARE_MESSAGE_MAP()
};

CAboutDlg::CAboutDlg() : CDialog(CAboutDlg::IDD)
{
	//{{AFX_DATA_INIT(CAboutDlg)
	//}}AFX_DATA_INIT
}

void CAboutDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CAboutDlg)
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CAboutDlg, CDialog)
	//{{AFX_MSG_MAP(CAboutDlg)
		// No message handlers
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CStereo2Dlg dialog

CStereo2Dlg::CStereo2Dlg(CWnd* pParent /*=NULL*/)
	: CDialog(CStereo2Dlg::IDD, pParent)
{
	//{{AFX_DATA_INIT(CStereo2Dlg)
		// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
	// Note that LoadIcon does not require a subsequent DestroyIcon in Win32
	m_hIcon = AfxGetApp()->LoadIcon(IDR_MAINFRAME);
}

void CStereo2Dlg::DoDataExchange(CDataExchange* pDX)
{
	CDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CStereo2Dlg)
		// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CStereo2Dlg, CDialog)
	//{{AFX_MSG_MAP(CStereo2Dlg)
	ON_WM_SYSCOMMAND()
	ON_WM_PAINT()
	ON_WM_QUERYDRAGICON()
	ON_BN_CLICKED(IDC_RUN, OnRun)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CStereo2Dlg message handlers

BOOL CStereo2Dlg::OnInitDialog()
{
	CDialog::OnInitDialog();

	// Add "About..." menu item to system menu.

	// IDM_ABOUTBOX must be in the system command range.
	ASSERT((IDM_ABOUTBOX & 0xFFF0) == IDM_ABOUTBOX);
	ASSERT(IDM_ABOUTBOX < 0xF000);

	CMenu* pSysMenu = GetSystemMenu(FALSE);
	if (pSysMenu != NULL)
	{
		CString strAboutMenu;
		strAboutMenu.LoadString(IDS_ABOUTBOX);
		if (!strAboutMenu.IsEmpty())
		{
			pSysMenu->AppendMenu(MF_SEPARATOR);
			pSysMenu->AppendMenu(MF_STRING, IDM_ABOUTBOX, strAboutMenu);
		}
	}

	// Set the icon for this dialog.  The framework does this automatically
	//  when the application's main window is not a dialog
	SetIcon(m_hIcon, TRUE);			// Set big icon
	SetIcon(m_hIcon, FALSE);		// Set small icon
	
	// TODO: Add extra initialization here

	int i;
	for(i=0; i<(3 * IMG_H*IMG_W); i++)
	{
		colimagedata1[i] = 0;
		colimagedata2[i] = 0;
	}
	

	return TRUE;  // return TRUE  unless you set the focus to a control
}

void CStereo2Dlg::OnSysCommand(UINT nID, LPARAM lParam)
{
	if ((nID & 0xFFF0) == IDM_ABOUTBOX)
	{
		CAboutDlg dlgAbout;
		dlgAbout.DoModal();
	}
	else
	{
		CDialog::OnSysCommand(nID, lParam);
	}
}

// If you add a minimize button to your dialog, you will need the code below
//  to draw the icon.  For MFC applications using the document/view model,
//  this is automatically done for you by the framework.

void CStereo2Dlg::OnPaint() 
{
	if (IsIconic())
	{
		CPaintDC dc(this); // device context for painting

		SendMessage(WM_ICONERASEBKGND, (WPARAM) dc.GetSafeHdc(), 0);

		// Center icon in client rectangle
		int cxIcon = GetSystemMetrics(SM_CXICON);
		int cyIcon = GetSystemMetrics(SM_CYICON);
		CRect rect;
		GetClientRect(&rect);
		int x = (rect.Width() - cxIcon + 1) / 2;
		int y = (rect.Height() - cyIcon + 1) / 2;

		// Draw the icon
		dc.DrawIcon(x, y, m_hIcon);
	}
	else
	{
		CDialog::OnPaint();
	}
}

// The system calls this to obtain the cursor to display while the user drags
//  the minimized window.
HCURSOR CStereo2Dlg::OnQueryDragIcon()
{
	return (HCURSOR) m_hIcon;
}




void CStereo2Dlg::OnRun() 
{
//	int err=imgPlotDC ((GUIHNDL)this->GetDC()->m_hDC, (void *)ImaqBuffer, 0, 0,
//				        640, 480,
//			            CANVASLEFT, CANVASTOP, FALSE);

    device=this->GetDC();



	Read_cam_param();
	Get_transf_mat();

//*****Read reference image***********************************************
	RefImageCam1 = &refimagedatacam1[0];
	RefImageCam2 = &refimagedatacam2[0];

	Read_image("C:\\Images6\\delta1_001.raw", RefImageCam1);
	Read_image("C:\\Images6\\delta1_001.raw", RefImageCam2);
//************************************************************************


//*****Read actual image**************************************************
    ImageCam1 = &imagedatacam1[0];
    ImageCam2 = &imagedatacam2[0];

//	Read_image("F:\\Calib_Pattern_Pic4\\Raw\\cam1_11.raw", ImageCam1);
	Read_image("C:\\Images6\\delta1_003.raw", ImageCam1);

//	Read_image("F:\\Calib_Pattern_Pic4\\Raw\\cam2_11.raw", ImageCam2);
	Read_image("C:\\Images6\\delta1_004.raw", ImageCam2);

    ImageCam1 = &imagedatacam1[0];
    ImageCam2 = &imagedatacam2[0];

	Plot_image(device, ImageCam1 ,1, 0);
	Plot_image(device, ImageCam2, 2, 0);
//************************************************************************


    ImageCam1    = &imagedatacam1[0];
    ImageCam2    = &imagedatacam2[0];
	RefImageCam1 = &refimagedatacam1[0];
	RefImageCam2 = &refimagedatacam2[0];

	Img_proc(ImageCam1, RefImageCam1, 1);
	Img_proc(ImageCam2, RefImageCam2, 2);

    ImageCam1 = &imagedatacam1[0];
    ImageCam2 = &imagedatacam2[0];


    Extract_streaks(streak1, streak_par1, &m1, ImageCam1);
    Extract_streaks(streak2, streak_par2, &m2, ImageCam2);
	Plot_points(device, imagedatacam1, m1, streak_par1, 1);
	Plot_points(device, imagedatacam2, m2, streak_par2, 2);


//	Get_epi();
//	Match_points_epi();
//	Plot_epi();


//   Get_3D_coord();




}


